#!/bin/bash
# shellcheck disable=1090

function dot-reset() {
  source "${HOME}/.bashrc"
}

function sd() {
  declare -A dir_list
  while IFS="=" read -r key value; do
    dir_list[$key]=$value
  done < "${HOME}/.dot_dirs"
  if [ "$#" -eq 0 ]; then
    cat "${HOME}/.dot_dirs"
  elif [ "$#" -eq 1 ]; then
    if [[ -v dir_list[$1] ]]; then
      cd "${dir_list[$1]}" || exit
    fi
  else
    if [ -z "$2" ]; then
      unset "dir_list[$1]"
    else
      dir_list[$1]=$2
    fi
    for key in "${!dir_list[@]}"; do
      echo "${key}=${dir_list[$key]}"
    done > "${HOME}/.dot_dirs"
  fi
}

function apt-update() {
  sudo apt update
}

function apt-update() {
  if sudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y; then
    if [ -f /var/run/reboot-required ]; then
      echo -e "\e[33m*** Reboot Required ***\e[0m"
    else
      echo -e "\e[34m*** System Updated ***\e[0m"
    fi
  else
    echo -e "\e[31m*** System Update Failed ***\e[0m"
  fi
}

function read-row() {
  mapfile -t rows <<< "${1}"
  echo "${rows[$2]}"
}

function read-col() {
  columns=("${1}")
  echo "${columns[$2]}"
}

function disk-info() {
  disk_free=$(df -h /)
  data=($(read-row "${disk_free}" 1))
  echo "${data[3]} free (${data[4]} used)"
}

function memory-info() {
  mem_free=$(free -h --si)
  data=($(read-row "${mem_free}" 1))
  echo "${data[2]} of ${data[1]}"
}

function swap-info() {
  mem_free=$(free -h --si)
  data=($(read-row "${mem_free}" 2))
  echo "${data[2]} of ${data[1]}"
}

function os-info() {
  os=$(lsb_release -s -d)
  code=$(lsb_release -s -c)
  echo "${os} (${code})"
}

alias hm='home'
function home() {
  clear
  cd "${HOME}" || exit
  user="$USER @ $(hostname)"
  hr="------------------------------------------"

  echo " $user"
  echo " ${hr::${#user}}"
  echo "      os:  $(os-info)"
  echo "  kernel:  $(uname -r) $(uname -m)"
  echo "    date:  $(date +"%Y-%m-%d %T")"
  echo "  memory:  $(memory-info)"
  echo " storage:  $(disk-info)"
  echo "    swap:  $(swap-info)"
  echo "   local:  ${LOCAL_IP}"
  echo "  public:  ${PUBLIC_IP}"
  echo ""
}


